{"version":3,"sources":["./src/app/admin-area/admin-product-list/admin-product-list.component.ts","./src/app/admin-area/admin-product-list/admin-product-list.component.html","./src/app/admin-area/admin-product-card/admin-product-card.component.ts","./src/app/admin-area/admin-product-card/admin-product-card.component.html","./src/app/admin-area/admin-add-form/admin-add-form.component.ts","./src/app/admin-area/admin-add-form/admin-add-form.component.html","./src/app/admin-area/admin-market/admin-market.component.ts","./src/app/admin-area/admin-market/admin-market.component.html","./src/app/admin-area/admin-side-control/admin-side-control.component.ts","./src/app/admin-area/admin-side-control/admin-side-control.component.html","./src/app/admin-area/admin-area.module.ts","./src/app/services/admin-services/admin.service.ts","./src/app/admin-area/admin-edit-form/admin-edit-form.component.ts","./src/app/admin-area/admin-edit-form/admin-edit-form.component.html"],"names":[],"mappings":"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","file":"admin-area-admin-area-module.js","sourcesContent":["import { AuthService } from 'src/app/services/global-services/auth.service';\nimport { ProductsService } from '../../services/market-services/products.service';\nimport { CategoryModel } from '../../models/product-models/category.model';\nimport { CategoriesService } from '../../services/market-services/categories.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ProductModel } from 'src/app/models/product-models/product.model';\nimport store from 'src/app/redux/store';\nimport { Unsubscribe } from 'redux';\n\n@Component({\n    selector: 'app-admin-product-list',\n    templateUrl: './admin-product-list.component.html',\n    styleUrls: ['./admin-product-list.component.css']\n})\nexport class AdminProductListComponent implements OnInit {\n\n    public categories: CategoryModel[];\n    public products: ProductModel[];\n    public productsSwitched: ProductModel[];\n    public unSubscribeFromStore: Unsubscribe;\n\n    public constructor(private categoriesService: CategoriesService,\n        private productsService: ProductsService,\n        private authService: AuthService) { }\n\n    public async ngOnInit(): Promise<void> {\n        try {\n            //getting all categories/products using services ;\n            this.categories = await this.categoriesService.getAllCategoriesAsync();\n            this.products = await this.productsService.getAllProducts();\n\n            //making another variable with the same values\n            //as products for future changes without effect the products;\n            this.productsSwitched = [...this.products];\n\n            //subscribe for any further changes in store.\n            this.unSubscribeFromStore = store.subscribe(async () => {\n                this.products = await this.productsService.getAllProducts();\n                this.productsSwitched = [...this.products];\n            })\n        } catch (error) {\n            if (error.status === 403) {\n                this.authService.logout();\n            }\n        }\n    }\n\n    //handling category change\n    public changeCategory(_id: string): void {\n        this.productsSwitched = this.products.filter(p => p.categoryId === _id);\n    }\n\n    //handling category change\n    public allCategory(): void {\n        this.productsSwitched = [...this.products];\n    }\n\n    //handling search for specify product\n    public searchProduct(productName: string): void {\n        this.productsSwitched = this.products.filter(p => p.name.toLowerCase().includes(productName.toLowerCase()));\n    }\n\n    //destroy the subscribe after exit the component for using less memory;\n    public ngOnDestroy(): void {\n        if (this.unSubscribeFromStore)\n            this.unSubscribeFromStore()\n    }\n\n}\n","<nav mat-tab-nav-bar>\n    <app-search-bar (productToSearch)=\"searchProduct($event)\"></app-search-bar>\n    <span class=\"toolbar-flex\"></span>\n    <a mat-tab-link active (click)=\"allCategory()\">\n        All\n    </a>\n    <a mat-tab-link active *ngFor=\"let c of categories\" (click)=\"changeCategory(c._id)\">\n        {{c.categoryName}}\n    </a>\n</nav>\n<div>\n    <ng-container *ngIf=\"productsSwitched?.length\">\n        <app-admin-product-card *ngFor=\"let p of productsSwitched\" [product]=\"p\"></app-admin-product-card>\n    </ng-container>\n    <ng-container *ngIf=\"!products?.length\">\n        <div class=\"nothing-in-store\">\n            <p>\n                <mat-spinner></mat-spinner>\n            </p>\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"!productsSwitched?.length\">\n        <div class=\"nothing-in-store\">\n            <p>\n                <span>Nothing with that name in store</span>\n            </p>\n        </div>\n    </ng-container>\n</div>","import { Component, Input, OnInit } from '@angular/core';\nimport { ProductModel } from 'src/app/models/product-models/product.model';\nimport { environment } from 'src/environments/environment';\nimport store from 'src/app/redux/store';\nimport { adminUpdatedProductAction } from 'src/app/redux/admin-state';\n\n@Component({\n    selector: 'app-admin-product-card',\n    templateUrl: './admin-product-card.component.html',\n    styleUrls: ['./admin-product-card.component.css']\n})\nexport class AdminProductCardComponent implements OnInit {\n\n    //getting product from product list;\n    @Input()\n    public product: ProductModel;\n\n    public imageUrl: string;\n\n    public async ngOnInit(): Promise<void> {\n        this.imageUrl = environment.productsUrl + \"productImages/\" + this.product.imageName;\n    }\n\n    //function to activate admin-edit-form\n    //and downloading the specify product to redux.\n    public editProduct(): void {\n        store.dispatch(adminUpdatedProductAction(this.product));\n    }\n\n}\n\n\n\n","<mat-card>\n    <mat-card-header>\n        <img mat-card-image src=\"{{imageUrl}}\" alt=\"{{product.name}}\">\n        <button mat-mini-fab color=\"warn\" (click)=\"editProduct()\">\n            <mat-icon>edit</mat-icon>\n        </button>\n    </mat-card-header>\n    <mat-card-content>\n        <mat-card-title>{{product.name}}</mat-card-title>\n        <mat-card-subtitle>{{product.price | currency}}</mat-card-subtitle>\n    </mat-card-content>\n</mat-card>","import { AdminService } from '../../services/admin-services/admin.service';\nimport { NotificationService } from '../../services/global-services/notification.service';\nimport { CategoriesService } from '../../services/market-services/categories.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { CategoryModel } from 'src/app/models/product-models/category.model';\nimport { FormBuilder, FormControl, FormGroup, FormGroupDirective, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'app-admin-add-form',\n    templateUrl: './admin-add-form.component.html',\n    styleUrls: ['./admin-add-form.component.css']\n})\nexport class AdminAddFormComponent implements OnInit {\n\n    @ViewChild(FormGroupDirective) public myForm: FormGroupDirective;\n\n    public ProductForm: FormGroup;\n    public categories: CategoryModel[];\n    public preview: string;\n    public formSubmitted = false;\n\n    public constructor(private _formBuilder: FormBuilder,\n        private categoriesService: CategoriesService,\n        private notificationService: NotificationService,\n        private adminService: AdminService) { }\n\n    public async ngOnInit(): Promise<void> {\n        try {\n            //getting categories using service.\n            this.categories = await this.categoriesService.getAllCategoriesAsync();\n\n            //validation for form\n            this.ProductForm = this._formBuilder.group({\n                name: ['', Validators.required],\n                price: ['', [Validators.required, Validators.min(0.4), Validators.max(1000)]],\n                categoryId: ['', Validators.required],\n                newImage: ['', Validators.required]\n            });\n\n        } catch (error) {\n            this.notificationService.error(error)\n        }\n    }\n\n    //function to handle image change and show it at preview\n    public handleImage(image: Event): void {\n        if ((image.target as HTMLInputElement).files[0]) {\n            const file = (event.target as HTMLInputElement).files[0];\n            this.ProductForm.patchValue({ newImage: file });\n            this.ProductForm.get('newImage').updateValueAndValidity();\n            const reader = new FileReader();\n            reader.onload = () => {\n                this.preview = reader.result.toString();\n            };\n            reader.readAsDataURL(file);\n\n        }\n    }\n\n    //function to handle add product;\n    public async addProduct(): Promise<void> {\n        try {\n            this.formSubmitted = true;\n            if (this.ProductForm.valid) {\n                await this.adminService.addProductAsync(this.ProductForm.value);\n                this.resetForm();\n            }\n        } catch (error) {\n            this.notificationService.error(error)\n        }\n    }\n\n    //Reset form after submit\n    public resetForm = () => {\n        this.formSubmitted = false;\n        this.preview = '';\n        this.ProductForm.reset();\n        this.myForm.resetForm();\n    }\n\n    //error message handles;\n    public errorMessage(input: string): string {\n        const inputControl: FormControl = (this.ProductForm.get(input) as FormControl);\n        if (inputControl.hasError('required')) return `${input} is required`;\n        if (inputControl.hasError('pattern')) return `Example for pattern Ice Milk Or Ice-Milk`;\n        if (inputControl.hasError('minlength')) return 'Minimum length is 2';\n        if (inputControl.hasError('maxlength')) return 'Maximum length is 25';\n        if (inputControl.hasError('min')) return 'Minimum Price is 0.4';\n        if (inputControl.hasError('max')) return 'Maximum Price is 1000';\n        return '';\n    }\n\n}\n","<form *ngIf=\"ProductForm\" [formGroup]=\"ProductForm\" (submit)=\"addProduct()\">\n    <h1>Add Product</h1>\n\n    <mat-form-field appearance=\"fill\">\n        <mat-label>Category</mat-label>\n        <mat-select formControlName=\"categoryId\" required>\n            <mat-option *ngFor=\"let c of categories\" [value]=\"c._id\">{{c.categoryName}}</mat-option>\n        </mat-select>\n        <mat-error>\n            {{ errorMessage(\"categoryId\") }}\n        </mat-error>\n    </mat-form-field>\n\n    <br>\n    <mat-form-field appearance=\"fill\">\n        <mat-label>Product Name</mat-label>\n        <input matInput formControlName=\"name\" pattern=\"^([a-zA-Z0-9\\u0590-\\u05fe]+[_@./#&+-]?\\s?)+$\" minlength=\"2\" maxlength=\"25\" required>\n        <mat-error>\n            {{ errorMessage(\"name\") }}\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n        <mat-label>Product Price</mat-label>\n        <input matInput formControlName=\"price\" type=\"number\" step=\"0.01\" min=\"0.4\" max=\"1000\" required>\n        <mat-error>\n            {{ errorMessage(\"price\") }}\n        </mat-error>\n    </mat-form-field>\n\n    <br>\n    <button mat-raised-button type=\"button\" (click)=\"newImageInput.click()\">Choose Image File</button>\n    <input type=\"file\" #newImageInput class=\"ng-hide\" name=\"newImage\" (change)=\"handleImage($event)\" accept=\"image/*\"\n        required />\n    <mat-error *ngIf=\"formSubmitted\">\n        {{ errorMessage(\"newImage\")}}\n    </mat-error>\n    <br><br>\n    <ng-container *ngIf=\"preview\">\n        <img [src]=\"preview\">\n        <br><br>\n    </ng-container>\n\n    <button mat-raised-button color=\"primary\">Send</button>\n</form>","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-admin-market',\n    templateUrl: './admin-market.component.html',\n    styleUrls: ['./admin-market.component.css']\n})\nexport class AdminMarketComponent { }\n","<mat-drawer-container>\n    <mat-drawer opened #drawer mode=\"side\">\n        <app-admin-side-control></app-admin-side-control>\n    </mat-drawer>\n    <app-admin-product-list></app-admin-product-list>\n</mat-drawer-container>","import { Component, OnInit } from '@angular/core';\nimport { Unsubscribe } from 'redux';\nimport { ProductModel } from 'src/app/models/product-models/product.model';\nimport store from 'src/app/redux/store';\n\n@Component({\n    selector: 'app-admin-side-control',\n    templateUrl: './admin-side-control.component.html',\n    styleUrls: ['./admin-side-control.component.css']\n})\nexport class AdminSideControlComponent implements OnInit {\n    public unSubscribeFromStore: Unsubscribe;\n    public productToEdit: ProductModel = store.getState().adminProductState.product;\n\n    public ngOnInit(): void {\n        //subscribe to store for any further changes in products\n        this.unSubscribeFromStore = store.subscribe(() => {\n            this.productToEdit = store.getState().adminProductState.product;\n        })\n    }\n\n    //destroy the subscribe after exit the component for using less memory\n    public ngOnDestroy(): void {\n        if (this.unSubscribeFromStore)\n            this.unSubscribeFromStore();\n    }\n\n}\n","<div class=\"cart-list-container\">\n    <header>\n        <h1>Admin Panel <mat-icon>build</mat-icon>\n        </h1>\n    </header>\n    <main class=\"cart-card-container\">\n        <ng-container *ngIf=\"!productToEdit\">\n            <app-admin-add-form></app-admin-add-form>\n        </ng-container>\n        <ng-container *ngIf=\"productToEdit\">\n            <app-admin-edit-form [product]=\"productToEdit\"></app-admin-edit-form>\n        </ng-container>\n    </main>\n</div>","import { AdminSideControlComponent } from './admin-side-control/admin-side-control.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AdminMarketComponent } from './admin-market/admin-market.component';\nimport { AdminProductListComponent } from './admin-product-list/admin-product-list.component';\nimport { AdminProductCardComponent } from './admin-product-card/admin-product-card.component';\nimport { AdminEditFormComponent } from './admin-edit-form/admin-edit-form.component';\nimport { AdminAddFormComponent } from './admin-add-form/admin-add-form.component';\nimport { MatSelectModule } from '@angular/material/select';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { SharedAreaModule } from '../shared-area/shared-area.module';\n\nconst routes: Routes = [\n    { path: \"\", component: AdminMarketComponent }\n]\n\n@NgModule({\n    declarations: [\n        AdminMarketComponent,\n        AdminProductListComponent,\n        AdminProductCardComponent,\n        AdminSideControlComponent,\n        AdminEditFormComponent,\n        AdminAddFormComponent\n    ],\n    imports: [\n        SharedAreaModule,\n        MatSelectModule,\n        ReactiveFormsModule,\n        MatToolbarModule,\n        MatMenuModule,\n        MatDialogModule,\n        MatStepperModule,\n        MatDividerModule,\n        MatSidenavModule,\n        MatTabsModule,\n        RouterModule.forChild(routes)\n\n    ]\n})\nexport class AdminAreaModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { addedProductAction, updatedProductAction } from 'src/app/redux/products-state';\nimport { environment } from 'src/environments/environment';\nimport { ProductModel } from '../../models/product-models/product.model';\nimport { adminPanelProductAddAction } from '../../redux/admin-state';\nimport store from '../../redux/store';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AdminService {\n\n    public constructor(private httpClient: HttpClient) { }\n\n    public async addProductAsync(product: ProductModel): Promise<void> {\n        const myFormData = new FormData();\n        myFormData.append(\"name\", product.name);\n        myFormData.append(\"price\", product.price.toString());\n        myFormData.append(\"categoryId\", product.categoryId.toString());\n        myFormData.append(\"newImage\", product.newImage);\n        await this.httpClient.post<ProductModel>(environment.adminPanelUrl + \"add-product\", myFormData).toPromise();\n    }\n\n    public async updateProductAsync(product: ProductModel): Promise<ProductModel> {\n        const myFormData = new FormData();\n        myFormData.append(\"name\", product.name);\n        myFormData.append(\"price\", product.price.toString());\n        myFormData.append(\"categoryId\", product.categoryId.toString());\n        myFormData.append(\"imageName\", product.imageName);\n        product.newImage && myFormData.append(\"newImage\", product.newImage);\n        const updatedProduct = await this.httpClient.put<ProductModel>(environment.adminPanelUrl + \"update-product/\" + product._id, myFormData).toPromise();\n        store.dispatch(adminPanelProductAddAction());\n        return updatedProduct;\n    }\n\n}\n","import { environment } from 'src/environments/environment';\nimport { AdminService } from '../../services/admin-services/admin.service';\nimport { NotificationService } from '../../services/global-services/notification.service';\nimport { CategoriesService } from '../../services/market-services/categories.service';\nimport { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { CategoryModel } from 'src/app/models/product-models/category.model';\nimport { ProductModel } from 'src/app/models/product-models/product.model';\nimport store from 'src/app/redux/store';\nimport { adminPanelProductAddAction } from 'src/app/redux/admin-state';\nimport { FormBuilder, Validators, FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n    selector: 'app-admin-edit-form',\n    templateUrl: './admin-edit-form.component.html',\n    styleUrls: ['./admin-edit-form.component.css']\n})\nexport class AdminEditFormComponent implements OnInit, OnChanges {\n    @Input()\n    public product: ProductModel;\n\n    public ProductForm: FormGroup;\n    public categories: CategoryModel[];\n    public preview: string;\n    public formSubmitted = false;\n\n\n    public constructor(private _formBuilder: FormBuilder,\n        private categoriesService: CategoriesService,\n        private notificationService: NotificationService,\n        private adminService: AdminService) { }\n\n    public async ngOnInit(): Promise<void> {\n        try {\n            //getting categories using service.\n            this.categories = await this.categoriesService.getAllCategoriesAsync();\n        } catch (error) {\n            this.notificationService.error(error)\n        }\n    }\n\n    public ngOnChanges(): void {\n        //validation for form and create a form builder.\n        this.ProductForm = this._formBuilder.group({\n            _id: [this.product._id],\n            name: [this.product.name, Validators.required],\n            price: [this.product.price, [Validators.required, Validators.min(0.4), Validators.max(1000)]],\n            categoryId: [this.product.categoryId, Validators.required],\n            newImage: [''],\n            imageName: [this.product.imageName]\n        });\n        this.preview = environment.productsUrl + \"productImages/\" + this.product.imageName;\n    }\n\n    //function to handle image change and show it at preview\n    public handleImage(image: Event): void {\n        if ((image.target as HTMLInputElement).files[0]) {\n            const file = (event.target as HTMLInputElement).files[0];\n            this.ProductForm.patchValue({ newImage: file });\n            this.ProductForm.get('newImage').updateValueAndValidity();\n            const reader = new FileReader();\n            reader.onload = () => {\n                this.preview = reader.result.toString();\n            };\n            reader.readAsDataURL(file);\n        }\n    }\n\n    //function to update the product;\n    public async updateProduct(): Promise<void> {\n        try {\n            this.formSubmitted = true;\n            if (this.ProductForm.valid) {\n                const updatedProduct = await this.adminService.updateProductAsync(this.ProductForm.value);\n                this.notificationService.success(`${updatedProduct.name} updated successfully`);\n            }\n        } catch (error) {\n            this.notificationService.error(error);\n        }\n    }\n\n    //function to clean the redux for show the add-product-form;\n    public backToAddProduct(): void {\n        store.dispatch(adminPanelProductAddAction());\n    }\n\n    //error message handler;\n    public errorMessage(input: string): string {\n        const inputControl: FormControl = (this.ProductForm.get(input) as FormControl);\n        if (inputControl.hasError('required')) return `${input} is required`;\n        if (inputControl.hasError('minlength')) return 'Minimum length is 2';\n        if (inputControl.hasError('pattern')) return `Example for pattern Ice Milk Or Ice-Milk`;\n        if (inputControl.hasError('maxlength')) return 'Maximum length is 25';\n        if (inputControl.hasError('min')) return 'Minimum Price is 0.4';\n        if (inputControl.hasError('max')) return 'Maximum Price is 1000';\n        return '';\n    }\n\n\n}\n","<form *ngIf=\"ProductForm\" [formGroup]=\"ProductForm\" (submit)=\"updateProduct()\">\n    <h1>Update Product</h1>\n\n    <mat-form-field appearance=\"fill\">\n        <mat-label>Category</mat-label>\n        <mat-select formControlName=\"categoryId\" required>\n            <mat-option *ngFor=\"let c of categories\" [value]=\"c._id\">{{c.categoryName}}</mat-option>\n        </mat-select>\n        <mat-error>\n            {{ errorMessage(\"categoryId\") }}\n        </mat-error>\n    </mat-form-field>\n\n    <br>\n    <mat-form-field appearance=\"fill\">\n        <mat-label>Product Name</mat-label>\n        <input matInput formControlName=\"name\" pattern=\"^([a-zA-Z0-9\\u0590-\\u05fe]+[_@./#&+-]?\\s?)+$\" minlength=\"2\" maxlength=\"25\" required>\n        <mat-error>\n            {{ errorMessage(\"name\") }}\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n        <mat-label>Product Price</mat-label>\n        <input matInput formControlName=\"price\" type=\"number\" step=\"0.01\" min=\"0.4\" max=\"1000\" required>\n        <mat-error>\n            {{ errorMessage(\"price\") }}\n        </mat-error>\n    </mat-form-field>\n\n    <br>\n    <button mat-raised-button type=\"button\" (click)=\"newImageInput.click()\">Choose Image File</button>\n    <input type=\"file\" #newImageInput class=\"ng-hide\" name=\"newImage\" (change)=\"handleImage($event)\" accept=\"image/*\" />\n    <br><br>\n    <ng-container *ngIf=\"preview\">\n        <img [src]=\"preview\">\n        <br><br>\n    </ng-container>\n\n    <button mat-raised-button color=\"primary\">Send</button>\n    <button class=\"backToAddProduct\" mat-raised-button type=\"button\" (click)=\"backToAddProduct()\">Back To Add\n        Product</button>\n</form>"],"sourceRoot":"webpack:///"}